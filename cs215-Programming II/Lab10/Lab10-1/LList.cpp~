#include "LList.h"
LList::LNode::LNode ()
{ // This function will
  
  data = 0;
  next = NULL;
}

LList::LList ()
{ // This function will

  size = 0;
  first= NULL;
}

LList::LList (const LList & other)
{ // This function will
  first = NULL;
  last = NULL;
  size = 0;
  for(LNode * n = other.first; n!=NULL; n= n->next)
    InsertLast(n->data);
}

LList::~LList ()
{ // This function will

  while(first)
    DeleteFirst();
  
}

LList & LList::operator = (const LList & other)
{ // This function will

  if (this == &other)
	return * this;
  while (first)
    DeleteFirst();
  for (LNode * n = other.first; n!= NULL; n = n->next)
    InsertLast (n->data);
  return * this;
  
}

bool LList::operator == (const LList & other)
{ // This function will

  if (size != other.size)
    return false;
  LNode * n = first;
  LNode * m = other.first;
  while (n != NULL)
    {
      if (n->data != m->data)
	{
	  return false;
	}
      n = n->next;
      m = m->next;
    }
  return true;
      
}

int LList::Size () const
{ // This function will
   LList::LNode * np = first;
  
   int count = 0;  
   while(np!= NULL)
     {
       count++;
       np = np-> next;
     }
      
   return count;
}

ostream & operator << (ostream & outs, const LList & L)
{ // This function will

  LList::LNode * np =L.first;
  
  for(int i=0; i<L.size; i++)
    {
      outs<< np-> data<<" ";

      np= np->next;
    }
  if(L.size == 0);
    return outs;
}

bool LList::InsertFirst (const int & value)
{ // This function will

  LNode* tmp = new LNode;
  if(tmp == NULL)
   {
     return false;
   }

  
   tmp-> data = value;
  
   tmp-> next = first;

   first = tmp;

   size ++;

  return true;

  
}

bool LList::InsertLast (const int & value)
{ // This function will
  if(size == 0)
    {
      return InsertFirst(value);
    }

  LNode * np = first;
  LNode * mid = NULL;

  while( np != NULL)
    {
      mid = np;
      np = np-> next;
    }

  LNode * last = new LNode;
  if( last == NULL)
    return false;
  mid-> next = last;
  last-> next = NULL;
  last-> data = value;
  size++;
  return true;
  
  
}

bool LList::DeleteFirst ()
{ // This function will
  if(first== NULL)
     return false;

  LNode* tmp = first-> next;
  delete first;
  first = tmp;
  size-- ;
  return true;
}

bool LList::DeleteLast ()
{ // This function will
  if(first == NULL)
    return false;
  if(size == 1)
    return DeleteFirst();

  LNode* np = first;
  LNode* mid = NULL;
  while(np->next != NULL)
    {
      mid = np;
      np = np-> next;
    }
  mid->next  = NULL;
  delete np;
  size-- ;
  return true;
    
}

